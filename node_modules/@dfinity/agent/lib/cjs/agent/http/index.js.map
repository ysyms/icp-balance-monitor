{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/agent/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonObject } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../../errors';\nimport { AnonymousIdentity, Identity } from '../../auth';\nimport * as cbor from '../../cbor';\nimport { RequestId, hashOfMap, requestIdOf } from '../../request_id';\nimport { bufEquals, bufFromBufLike, concat, fromHex, toHex } from '../../utils/buffer';\nimport {\n  Agent,\n  ApiQueryResponse,\n  HttpDetailsResponse,\n  QueryFields,\n  QueryResponse,\n  ReadStateOptions,\n  ReadStateResponse,\n  SubmitResponse,\n  v3ResponseBody,\n} from '../api';\nimport { Expiry, httpHeadersTransform, makeNonceTransform } from './transforms';\nimport {\n  CallRequest,\n  Endpoint,\n  HttpAgentRequest,\n  HttpAgentRequestTransformFn,\n  HttpAgentSubmitRequest,\n  makeNonce,\n  Nonce,\n  QueryRequest,\n  ReadRequestType,\n  SubmitRequestType,\n} from './types';\nimport {\n  AgentCallError,\n  AgentHTTPResponseError,\n  AgentQueryError,\n  AgentReadStateError,\n} from './errors';\nimport { SubnetStatus, request } from '../../canisterStatus';\nimport {\n  CertificateVerificationError,\n  HashTree,\n  LookupStatus,\n  lookup_path,\n} from '../../certificate';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { ExpirableMap } from '../../utils/expirableMap';\nimport { Ed25519PublicKey } from '../../public_key';\nimport { decodeTime } from '../../utils/leb';\nimport { ObservableLog } from '../../observable';\nimport { BackoffStrategy, BackoffStrategyFactory, ExponentialBackoff } from '../../polling/backoff';\nimport { DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS } from '../../constants';\nexport * from './transforms';\nexport * from './errors';\nexport { Nonce, makeNonce } from './types';\n\nexport enum RequestStatusResponseStatus {\n  Received = 'received',\n  Processing = 'processing',\n  Replied = 'replied',\n  Rejected = 'rejected',\n  Unknown = 'unknown',\n  Done = 'done',\n}\n\nconst MINUTE_TO_MSECS = 60 * 1000;\n\n// Root public key for the IC, encoded as hex\nexport const IC_ROOT_KEY =\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n  'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n  '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n  'b01291091c5f87b98883463f98091a0baaae';\n\nexport const MANAGEMENT_CANISTER_ID = 'aaaaa-aa';\n\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\n\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\n\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\n\nclass HttpDefaultFetchError extends AgentError {\n  constructor(public readonly message: string) {\n    super(message);\n  }\n}\nexport class IdentityInvalidError extends AgentError {\n  constructor(public readonly message: string) {\n    super(message);\n  }\n}\n\n// HttpAgent options that can be used at construction.\nexport interface HttpAgentOptions {\n  // A surrogate to the global fetch function. Useful for testing.\n  fetch?: typeof fetch;\n\n  // Additional options to pass along to fetch. Will not override fields that\n  // the agent already needs to set\n  // Should follow the RequestInit interface, but we intentially support non-standard fields\n  fetchOptions?: Record<string, unknown>;\n\n  // Additional options to pass along to fetch for the call API.\n  callOptions?: Record<string, unknown>;\n\n  // The host to use for the client. By default, uses the same host as\n  // the current page.\n  host?: string;\n\n  // The principal used to send messages. This cannot be empty at the request\n  // time (will throw).\n  identity?: Identity | Promise<Identity>;\n\n  /**\n   * The maximum time a request can be delayed before being rejected.\n   * @default 5 minutes\n   */\n  ingressExpiryInMinutes?: number;\n\n  credentials?: {\n    name: string;\n    password?: string;\n  };\n  /**\n   * Adds a unique {@link Nonce} with each query.\n   * Enabling will prevent queries from being answered with a cached response.\n   * @example\n   * const agent = new HttpAgent({ useQueryNonces: true });\n   * agent.addTransform(makeNonceTransform(makeNonce);\n   * @default false\n   */\n  useQueryNonces?: boolean;\n  /**\n   * Number of times to retry requests before throwing an error\n   * @default 3\n   */\n  retryTimes?: number;\n  /**\n   * The strategy to use for backoff when retrying requests\n   */\n  backoffStrategy?: BackoffStrategyFactory;\n  /**\n   * Whether the agent should verify signatures signed by node keys on query responses. Increases security, but adds overhead and must make a separate request to cache the node keys for the canister's subnet.\n   * @default true\n   */\n  verifyQuerySignatures?: boolean;\n  /**\n   * Whether to log to the console. Defaults to false.\n   */\n  logToConsole?: boolean;\n\n  /**\n   * Alternate root key to use for verifying certificates. If not provided, the default IC root key will be used.\n   */\n  rootKey?: ArrayBuffer;\n\n  /**\n   * Whether or not the root key should be automatically fetched during construction.\n   */\n  shouldFetchRootKey?: boolean;\n}\n\nfunction getDefaultFetch(): typeof fetch {\n  let defaultFetch;\n\n  if (typeof window !== 'undefined') {\n    // Browser context\n    if (window.fetch) {\n      defaultFetch = window.fetch.bind(window);\n    } else {\n      throw new HttpDefaultFetchError(\n        'Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.',\n      );\n    }\n  } else if (typeof global !== 'undefined') {\n    // Node context\n    if (global.fetch) {\n      defaultFetch = global.fetch.bind(global);\n    } else {\n      throw new HttpDefaultFetchError(\n        'Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.',\n      );\n    }\n  } else if (typeof self !== 'undefined') {\n    if (self.fetch) {\n      defaultFetch = self.fetch.bind(self);\n    }\n  }\n\n  if (defaultFetch) {\n    return defaultFetch;\n  }\n  throw new HttpDefaultFetchError(\n    'Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.',\n  );\n}\n\nfunction determineHost(configuredHost: string | undefined): string {\n  let host: URL;\n  if (configuredHost !== undefined) {\n    if (!configuredHost.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n      host = new URL(window.location.protocol + '//' + configuredHost);\n    } else {\n      host = new URL(configuredHost);\n    }\n  } else {\n    // Mainnet, local, and remote environments will have the api route available\n    const knownHosts = ['ic0.app', 'icp0.io', '127.0.0.1', 'localhost'];\n    const remoteHosts = ['.github.dev', '.gitpod.io'];\n    const location = typeof window !== 'undefined' ? window.location : undefined;\n    const hostname = location?.hostname;\n    let knownHost;\n    if (hostname && typeof hostname === 'string') {\n      if (remoteHosts.some(host => hostname.endsWith(host))) {\n        knownHost = hostname;\n      } else {\n        knownHost = knownHosts.find(host => hostname.endsWith(host));\n      }\n    }\n\n    if (location && knownHost) {\n      // If the user is on a boundary-node provided host, we can use the same host for the agent\n      host = new URL(\n        `${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`,\n      );\n    } else {\n      host = new URL('https://icp-api.io');\n    }\n  }\n  return host.toString();\n}\n\ninterface V1HttpAgentInterface {\n  _identity: Promise<Identity> | null;\n  readonly _fetch: typeof fetch;\n  readonly _fetchOptions?: Record<string, unknown>;\n  readonly _callOptions?: Record<string, unknown>;\n\n  readonly _host: URL;\n  readonly _credentials: string | undefined;\n  readonly _retryTimes: number; // Retry requests N times before erroring by default\n  _isAgent: true;\n}\n\n/** \n * A HTTP agent allows users to interact with a client of the internet computer\nusing the available methods. It exposes an API that closely follows the\npublic view of the internet computer, and is not intended to be exposed\ndirectly to the majority of users due to its low-level interface.\n * There is a pipeline to apply transformations to the request before sending\nit to the client. This is to decouple signature, nonce generation and\nother computations so that this class can stay as simple as possible while\nallowing extensions.\n */\nexport class HttpAgent implements Agent {\n  public rootKey: ArrayBuffer | null;\n  #rootKeyPromise: Promise<ArrayBuffer> | null = null;\n  #shouldFetchRootKey: boolean = false;\n  #identity: Promise<Identity> | null;\n  readonly #fetch: typeof fetch;\n  readonly #fetchOptions?: Record<string, unknown>;\n  readonly #callOptions?: Record<string, unknown>;\n  #timeDiffMsecs = 0;\n  readonly host: URL;\n  readonly #credentials: string | undefined;\n  readonly #retryTimes; // Retry requests N times before erroring by default\n  #backoffStrategy: BackoffStrategyFactory;\n  readonly #maxIngressExpiryInMinutes: number;\n\n  // Public signature to help with type checking.\n  public readonly _isAgent = true;\n  public config: HttpAgentOptions = {};\n\n  // The UTC time in milliseconds when the latest request was made\n  #waterMark = 0;\n\n  get waterMark(): number {\n    return this.#waterMark;\n  }\n\n  public log: ObservableLog = new ObservableLog();\n\n  #queryPipeline: HttpAgentRequestTransformFn[] = [];\n  #updatePipeline: HttpAgentRequestTransformFn[] = [];\n\n  #subnetKeys: ExpirableMap<string, SubnetStatus> = new ExpirableMap({\n    expirationTime: 5 * 60 * 1000, // 5 minutes\n  });\n  #verifyQuerySignatures = true;\n\n  /**\n   * @param options - Options for the HttpAgent\n   * @deprecated Use `HttpAgent.create` or `HttpAgent.createSync` instead\n   */\n  constructor(options: HttpAgentOptions = {}) {\n    this.config = options;\n    this.#fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n    this.#fetchOptions = options.fetchOptions;\n    this.#callOptions = options.callOptions;\n    this.#shouldFetchRootKey = options.shouldFetchRootKey ?? false;\n\n    // Use provided root key, otherwise fall back to IC_ROOT_KEY for mainnet or null if the key needs to be fetched\n    if (options.rootKey) {\n      this.rootKey = options.rootKey;\n    } else if (this.#shouldFetchRootKey) {\n      this.rootKey = null;\n    } else {\n      this.rootKey = fromHex(IC_ROOT_KEY);\n    }\n\n    const host = determineHost(options.host);\n    this.host = new URL(host);\n\n    if (options.verifyQuerySignatures !== undefined) {\n      this.#verifyQuerySignatures = options.verifyQuerySignatures;\n    }\n    // Default is 3\n    this.#retryTimes = options.retryTimes ?? 3;\n    // Delay strategy for retries. Default is exponential backoff\n    const defaultBackoffFactory = () =>\n      new ExponentialBackoff({\n        maxIterations: this.#retryTimes,\n      });\n    this.#backoffStrategy = options.backoffStrategy || defaultBackoffFactory;\n    // Rewrite to avoid redirects\n    if (this.host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n      this.host.hostname = IC0_DOMAIN;\n    } else if (this.host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n      this.host.hostname = ICP0_DOMAIN;\n    } else if (this.host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n      this.host.hostname = ICP_API_DOMAIN;\n    }\n\n    if (options.credentials) {\n      const { name, password } = options.credentials;\n      this.#credentials = `${name}${password ? ':' + password : ''}`;\n    }\n    this.#identity = Promise.resolve(options.identity || new AnonymousIdentity());\n\n    if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes > 5) {\n      throw new AgentError(\n        `The maximum ingress expiry time is 5 minutes. Provided ingress expiry time is ${options.ingressExpiryInMinutes} minutes.`,\n      );\n    }\n    if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes <= 0) {\n      throw new AgentError(\n        `Ingress expiry time must be greater than 0. Provided ingress expiry time is ${options.ingressExpiryInMinutes} minutes.`,\n      );\n    }\n\n    this.#maxIngressExpiryInMinutes = options.ingressExpiryInMinutes || 5;\n\n    // Add a nonce transform to ensure calls are unique\n    this.addTransform('update', makeNonceTransform(makeNonce));\n    if (options.useQueryNonces) {\n      this.addTransform('query', makeNonceTransform(makeNonce));\n    }\n    if (options.logToConsole) {\n      this.log.subscribe(log => {\n        if (log.level === 'error') {\n          console.error(log.message);\n        } else if (log.level === 'warn') {\n          console.warn(log.message);\n        } else {\n          console.log(log.message);\n        }\n      });\n    }\n  }\n\n  public static createSync(options: HttpAgentOptions = {}): HttpAgent {\n    return new this({ ...options });\n  }\n\n  public static async create(\n    options: HttpAgentOptions = {\n      shouldFetchRootKey: false,\n    },\n  ): Promise<HttpAgent> {\n    const agent = HttpAgent.createSync(options);\n    const initPromises: Promise<ArrayBuffer | void>[] = [agent.syncTime()];\n    if (agent.host.toString() !== 'https://icp-api.io' && options.shouldFetchRootKey) {\n      initPromises.push(agent.fetchRootKey());\n    }\n    await Promise.all(initPromises);\n    return agent;\n  }\n\n  public static async from(\n    agent: Pick<HttpAgent, 'config'> | V1HttpAgentInterface,\n  ): Promise<HttpAgent> {\n    try {\n      if ('config' in agent) {\n        return await HttpAgent.create(agent.config);\n      }\n      return await HttpAgent.create({\n        fetch: agent._fetch,\n        fetchOptions: agent._fetchOptions,\n        callOptions: agent._callOptions,\n        host: agent._host.toString(),\n        identity: agent._identity ?? undefined,\n      });\n    } catch {\n      throw new AgentError('Failed to create agent from provided agent');\n    }\n  }\n\n  public isLocal(): boolean {\n    const hostname = this.host.hostname;\n    return hostname === '127.0.0.1' || hostname.endsWith('127.0.0.1');\n  }\n\n  public addTransform(\n    type: 'update' | 'query',\n    fn: HttpAgentRequestTransformFn,\n    priority = fn.priority || 0,\n  ): void {\n    if (type === 'update') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = this.#updatePipeline.findIndex(x => (x.priority || 0) < priority);\n      this.#updatePipeline.splice(\n        i >= 0 ? i : this.#updatePipeline.length,\n        0,\n        Object.assign(fn, { priority }),\n      );\n    } else if (type === 'query') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = this.#queryPipeline.findIndex(x => (x.priority || 0) < priority);\n      this.#queryPipeline.splice(\n        i >= 0 ? i : this.#queryPipeline.length,\n        0,\n        Object.assign(fn, { priority }),\n      );\n    }\n  }\n\n  public async getPrincipal(): Promise<Principal> {\n    if (!this.#identity) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    return (await this.#identity).getPrincipal();\n  }\n\n  public async call(\n    canisterId: Principal | string,\n    options: {\n      methodName: string;\n      arg: ArrayBuffer;\n      effectiveCanisterId?: Principal | string;\n      callSync?: boolean;\n    },\n    identity?: Identity | Promise<Identity>,\n  ): Promise<SubmitResponse> {\n    await this.#rootKeyGuard();\n    // TODO - restore this value\n    const callSync = options.callSync ?? true;\n    const id = await (identity !== undefined ? await identity : await this.#identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    const canister = Principal.from(canisterId);\n    const ecid = options.effectiveCanisterId\n      ? Principal.from(options.effectiveCanisterId)\n      : canister;\n\n    const sender: Principal = id.getPrincipal() || Principal.anonymous();\n\n    let ingress_expiry = new Expiry(this.#maxIngressExpiryInMinutes * MINUTE_TO_MSECS);\n\n    // If the value is off by more than 30 seconds, reconcile system time with the network\n    if (Math.abs(this.#timeDiffMsecs) > 1_000 * 30) {\n      ingress_expiry = new Expiry(\n        this.#maxIngressExpiryInMinutes * MINUTE_TO_MSECS + this.#timeDiffMsecs,\n      );\n    }\n\n    const submit: CallRequest = {\n      request_type: SubmitRequestType.Call,\n      canister_id: canister,\n      method_name: options.methodName,\n      arg: options.arg,\n      sender,\n      ingress_expiry,\n    };\n\n    let transformedRequest = (await this._transform({\n      request: {\n        body: null,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.Call,\n      body: submit,\n    })) as HttpAgentSubmitRequest;\n\n    const nonce: Nonce | undefined = transformedRequest.body.nonce\n      ? toNonce(transformedRequest.body.nonce)\n      : undefined;\n\n    submit.nonce = nonce;\n\n    function toNonce(buf: ArrayBuffer): Nonce {\n      return new Uint8Array(buf) as Nonce;\n    }\n\n    // Apply transform for identity.\n    transformedRequest = (await id.transformRequest(transformedRequest)) as HttpAgentSubmitRequest;\n\n    const body = cbor.encode(transformedRequest.body);\n    const backoff = this.#backoffStrategy();\n    const requestId = requestIdOf(submit);\n    try {\n      // Attempt v3 sync call\n      const requestSync = () => {\n        this.log.print(\n          `fetching \"/api/v3/canister/${ecid.toText()}/call\" with request:`,\n          transformedRequest,\n        );\n        return this.#fetch('' + new URL(`/api/v3/canister/${ecid.toText()}/call`, this.host), {\n          ...this.#callOptions,\n          ...transformedRequest.request,\n          body,\n        });\n      };\n\n      const requestAsync = () => {\n        this.log.print(\n          `fetching \"/api/v2/canister/${ecid.toText()}/call\" with request:`,\n          transformedRequest,\n        );\n        return this.#fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this.host), {\n          ...this.#callOptions,\n          ...transformedRequest.request,\n          body,\n        });\n      };\n\n      const request = this.#requestAndRetry({\n        request: callSync ? requestSync : requestAsync,\n        backoff,\n        tries: 0,\n      });\n\n      const response = await request;\n      const responseBuffer = await response.arrayBuffer();\n      const responseBody = (\n        response.status === 200 && responseBuffer.byteLength > 0\n          ? cbor.decode(responseBuffer)\n          : null\n      ) as SubmitResponse['response']['body'];\n\n      // Update the watermark with the latest time from consensus\n      if (responseBody && 'certificate' in (responseBody as v3ResponseBody)) {\n        const time = await this.parseTimeFromResponse({\n          certificate: (responseBody as v3ResponseBody).certificate,\n        });\n        this.#waterMark = time;\n      }\n\n      return {\n        requestId,\n        response: {\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          body: responseBody,\n          headers: httpHeadersTransform(response.headers),\n        },\n        requestDetails: submit,\n      };\n    } catch (error) {\n      // If the error is due to the v3 api not being supported, fall back to v2\n      if ((error as AgentError).message.includes('v3 api not supported.')) {\n        this.log.warn('v3 api not supported. Fall back to v2');\n        return this.call(\n          canisterId,\n          {\n            ...options,\n            // disable v3 api\n            callSync: false,\n          },\n          identity,\n        );\n      }\n      const message = `Error while making call: ${(error as Error).message ?? String(error)}`;\n      const callError = new AgentCallError(\n        message,\n        error as HttpDetailsResponse,\n        toHex(requestId),\n        toHex(transformedRequest.body.sender_pubkey),\n        toHex(transformedRequest.body.sender_sig),\n        String(transformedRequest.body.content.ingress_expiry['_value']),\n      );\n      this.log.error(message, callError);\n      throw callError;\n    }\n  }\n\n  async #requestAndRetryQuery(args: {\n    ecid: Principal;\n    transformedRequest: HttpAgentRequest;\n    body: ArrayBuffer;\n    requestId: RequestId;\n    backoff: BackoffStrategy;\n    tries: number;\n  }): Promise<ApiQueryResponse> {\n    const { ecid, transformedRequest, body, requestId, backoff, tries } = args;\n\n    const delay = tries === 0 ? 0 : backoff.next();\n    this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with tries:`, {\n      tries,\n      backoff,\n      delay,\n    });\n\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n      throw new AgentError(\n        `Timestamp failed to pass the watermark after retrying the configured ${\n          this.#retryTimes\n        } times. We cannot guarantee the integrity of the response since it could be a replay attack.`,\n      );\n    }\n\n    if (delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    let response: ApiQueryResponse;\n    // Make the request and retry if it throws an error\n    try {\n      this.log.print(\n        `fetching \"/api/v2/canister/${ecid.toString()}/query\" with request:`,\n        transformedRequest,\n      );\n      const fetchResponse = await this.#fetch(\n        '' + new URL(`/api/v2/canister/${ecid.toString()}/query`, this.host),\n        {\n          ...this.#fetchOptions,\n          ...transformedRequest.request,\n          body,\n        },\n      );\n      if (fetchResponse.status === 200) {\n        const queryResponse: QueryResponse = cbor.decode(await fetchResponse.arrayBuffer());\n        response = {\n          ...queryResponse,\n          httpDetails: {\n            ok: fetchResponse.ok,\n            status: fetchResponse.status,\n            statusText: fetchResponse.statusText,\n            headers: httpHeadersTransform(fetchResponse.headers),\n          },\n          requestId,\n        };\n      } else {\n        throw new AgentHTTPResponseError(\n          `Gateway returned an error:\\n` +\n            `  Code: ${fetchResponse.status} (${fetchResponse.statusText})\\n` +\n            `  Body: ${await fetchResponse.text()}\\n`,\n          {\n            ok: fetchResponse.ok,\n            status: fetchResponse.status,\n            statusText: fetchResponse.statusText,\n            headers: httpHeadersTransform(fetchResponse.headers),\n          },\n        );\n      }\n    } catch (error) {\n      if (tries < this.#retryTimes) {\n        this.log.warn(\n          `Caught exception while attempting to make query:\\n` +\n            `  ${error}\\n` +\n            `  Retrying query.`,\n        );\n        return await this.#requestAndRetryQuery({ ...args, tries: tries + 1 });\n      }\n      throw error;\n    }\n\n    const timestamp = response.signatures?.[0]?.timestamp;\n\n    // Skip watermark verification if the user has set verifyQuerySignatures to false\n    if (!this.#verifyQuerySignatures) {\n      return response;\n    }\n\n    if (!timestamp) {\n      throw new Error(\n        'Timestamp not found in query response. This suggests a malformed or malicious response.',\n      );\n    }\n\n    // Convert the timestamp to milliseconds\n    const timeStampInMs = Number(BigInt(timestamp) / BigInt(1_000_000));\n\n    this.log.print('watermark and timestamp', {\n      waterMark: this.waterMark,\n      timestamp: timeStampInMs,\n    });\n\n    // If the timestamp is less than the watermark, retry the request up to the retry limit\n    if (Number(this.waterMark) > timeStampInMs) {\n      const error = new AgentError('Timestamp is below the watermark. Retrying query.');\n      this.log.error('Timestamp is below', error, {\n        timestamp,\n        waterMark: this.waterMark,\n      });\n      if (tries < this.#retryTimes) {\n        return await this.#requestAndRetryQuery({ ...args, tries: tries + 1 });\n      }\n      {\n        throw new AgentError(\n          `Timestamp failed to pass the watermark after retrying the configured ${\n            this.#retryTimes\n          } times. We cannot guarantee the integrity of the response since it could be a replay attack.`,\n        );\n      }\n    }\n\n    return response;\n  }\n\n  async #requestAndRetry(args: {\n    request: () => Promise<Response>;\n    backoff: BackoffStrategy;\n    tries: number;\n  }): Promise<Response> {\n    const { request, backoff, tries } = args;\n    const delay = tries === 0 ? 0 : backoff.next();\n\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n      throw new AgentError(\n        `Timestamp failed to pass the watermark after retrying the configured ${\n          this.#retryTimes\n        } times. We cannot guarantee the integrity of the response since it could be a replay attack.`,\n      );\n    }\n\n    if (delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n\n    let response: Response;\n    try {\n      response = await request();\n    } catch (error) {\n      if (this.#retryTimes > tries) {\n        this.log.warn(\n          `Caught exception while attempting to make request:\\n` +\n            `  ${error}\\n` +\n            `  Retrying request.`,\n        );\n        // Delay the request by the configured backoff strategy\n        return await this.#requestAndRetry({ request, backoff, tries: tries + 1 });\n      }\n      throw error;\n    }\n    if (response.ok) {\n      return response;\n    }\n\n    const responseText = await response.clone().text();\n    const errorMessage =\n      `Server returned an error:\\n` +\n      `  Code: ${response.status} (${response.statusText})\\n` +\n      `  Body: ${responseText}\\n`;\n\n    if (response.status === 404 && response.url.includes('api/v3')) {\n      throw new AgentHTTPResponseError('v3 api not supported. Fall back to v2', {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        headers: httpHeadersTransform(response.headers),\n      });\n    }\n    if (tries < this.#retryTimes) {\n      return await this.#requestAndRetry({ request, backoff, tries: tries + 1 });\n    }\n\n    throw new AgentHTTPResponseError(errorMessage, {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      headers: httpHeadersTransform(response.headers),\n    });\n  }\n\n  public async query(\n    canisterId: Principal | string,\n    fields: QueryFields,\n    identity?: Identity | Promise<Identity>,\n  ): Promise<ApiQueryResponse> {\n    await this.#rootKeyGuard();\n    const backoff = this.#backoffStrategy();\n    const ecid = fields.effectiveCanisterId\n      ? Principal.from(fields.effectiveCanisterId)\n      : Principal.from(canisterId);\n\n    this.log.print(`ecid ${ecid.toString()}`);\n    this.log.print(`canisterId ${canisterId.toString()}`);\n\n    let transformedRequest: HttpAgentRequest | undefined = undefined;\n    let queryResult;\n    const id = await (identity !== undefined ? identity : this.#identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n\n    const canister = Principal.from(canisterId);\n    const sender = id?.getPrincipal() || Principal.anonymous();\n\n    const request: QueryRequest = {\n      request_type: ReadRequestType.Query,\n      canister_id: canister,\n      method_name: fields.methodName,\n      arg: fields.arg,\n      sender,\n      ingress_expiry: new Expiry(this.#maxIngressExpiryInMinutes * MINUTE_TO_MSECS),\n    };\n\n    const requestId = requestIdOf(request);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.Query,\n      body: request,\n    });\n\n    // Apply transform for identity.\n    transformedRequest = (await id?.transformRequest(transformedRequest)) as HttpAgentRequest;\n\n    const body = cbor.encode(transformedRequest.body);\n\n    const args = {\n      canister: canister.toText(),\n      ecid,\n      transformedRequest,\n      body,\n      requestId,\n      backoff,\n      tries: 0,\n    };\n    const makeQuery = async () => {\n      return {\n        requestDetails: request,\n        query: await this.#requestAndRetryQuery(args),\n      };\n    };\n\n    const getSubnetStatus = async (): Promise<SubnetStatus | void> => {\n      if (!this.#verifyQuerySignatures) {\n        return undefined;\n      }\n      const subnetStatus = this.#subnetKeys.get(ecid.toString());\n      if (subnetStatus) {\n        return subnetStatus;\n      }\n      await this.fetchSubnetKeys(ecid.toString());\n      return this.#subnetKeys.get(ecid.toString());\n    };\n    // Attempt to make the query i=retryTimes times\n    // Make query and fetch subnet keys in parallel\n\n    try {\n      const [_queryResult, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);\n      queryResult = _queryResult;\n      const { requestDetails, query } = queryResult;\n\n      const queryWithDetails = {\n        ...query,\n        requestDetails,\n      };\n\n      this.log.print('Query response:', queryWithDetails);\n      // Skip verification if the user has disabled it\n      if (!this.#verifyQuerySignatures) {\n        return queryWithDetails;\n      }\n\n      try {\n        return this.#verifyQueryResponse(queryWithDetails, subnetStatus);\n      } catch {\n        // In case the node signatures have changed, refresh the subnet keys and try again\n        this.log.warn('Query response verification failed. Retrying with fresh subnet keys.');\n        this.#subnetKeys.delete(canisterId.toString());\n        await this.fetchSubnetKeys(ecid.toString());\n\n        const updatedSubnetStatus = this.#subnetKeys.get(canisterId.toString());\n        if (!updatedSubnetStatus) {\n          throw new CertificateVerificationError(\n            'Invalid signature from replica signed query: no matching node key found.',\n          );\n        }\n        return this.#verifyQueryResponse(queryWithDetails, updatedSubnetStatus);\n      }\n    } catch (error) {\n      const message = `Error while making call: ${(error as Error).message ?? String(error)}`;\n      const queryError = new AgentQueryError(\n        message,\n        error as HttpDetailsResponse,\n        String(requestId),\n        toHex(transformedRequest?.body?.sender_pubkey),\n        toHex(transformedRequest?.body?.sender_sig),\n        String(transformedRequest?.body?.content.ingress_expiry['_value']),\n      );\n      this.log.error(message, queryError);\n      throw queryError;\n    }\n  }\n\n  /**\n   * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n   * @param queryResponse - The response from the query\n   * @param subnetStatus - The subnet status, including all node keys\n   * @returns ApiQueryResponse\n   */\n  #verifyQueryResponse = (\n    queryResponse: ApiQueryResponse,\n    subnetStatus: SubnetStatus | void,\n  ): ApiQueryResponse => {\n    if (this.#verifyQuerySignatures === false) {\n      // This should not be called if the user has disabled verification\n      return queryResponse;\n    }\n    if (!subnetStatus) {\n      throw new CertificateVerificationError(\n        'Invalid signature from replica signed query: no matching node key found.',\n      );\n    }\n    const { status, signatures = [], requestId } = queryResponse;\n\n    const domainSeparator = new TextEncoder().encode('\\x0Bic-response');\n    for (const sig of signatures) {\n      const { timestamp, identity } = sig;\n      const nodeId = Principal.fromUint8Array(identity).toText();\n      let hash: ArrayBuffer;\n\n      // Hash is constructed differently depending on the status\n      if (status === 'replied') {\n        const { reply } = queryResponse;\n        hash = hashOfMap({\n          status: status,\n          reply: reply,\n          timestamp: BigInt(timestamp),\n          request_id: requestId,\n        });\n      } else if (status === 'rejected') {\n        const { reject_code, reject_message, error_code } = queryResponse;\n        hash = hashOfMap({\n          status: status,\n          reject_code: reject_code,\n          reject_message: reject_message,\n          error_code: error_code,\n          timestamp: BigInt(timestamp),\n          request_id: requestId,\n        });\n      } else {\n        throw new Error(`Unknown status: ${status}`);\n      }\n\n      const separatorWithHash = concat(domainSeparator, new Uint8Array(hash));\n\n      // FIX: check for match without verifying N times\n      const pubKey = subnetStatus?.nodeKeys.get(nodeId);\n      if (!pubKey) {\n        throw new CertificateVerificationError(\n          'Invalid signature from replica signed query: no matching node key found.',\n        );\n      }\n      const rawKey = Ed25519PublicKey.fromDer(pubKey).rawKey;\n      const valid = ed25519.verify(\n        sig.signature,\n        new Uint8Array(separatorWithHash),\n        new Uint8Array(rawKey),\n      );\n      if (valid) return queryResponse;\n\n      throw new CertificateVerificationError(\n        `Invalid signature from replica ${nodeId} signed query.`,\n      );\n    }\n    return queryResponse;\n  };\n\n  public async createReadStateRequest(\n    fields: ReadStateOptions,\n    identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    await this.#rootKeyGuard();\n    const id = await (identity !== undefined ? await identity : await this.#identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    const sender = id?.getPrincipal() || Principal.anonymous();\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.ReadState,\n      body: {\n        request_type: ReadRequestType.ReadState,\n        paths: fields.paths,\n        sender,\n        ingress_expiry: new Expiry(this.#maxIngressExpiryInMinutes * MINUTE_TO_MSECS),\n      },\n    });\n\n    // Apply transform for identity.\n    return id?.transformRequest(transformedRequest);\n  }\n\n  public async readState(\n    canisterId: Principal | string,\n    fields: ReadStateOptions,\n    identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line\n    request?: any,\n  ): Promise<ReadStateResponse> {\n    function getRequestId(fields: ReadStateOptions): RequestId | undefined {\n      for (const path of fields.paths) {\n        const [pathName, value] = path;\n        const request_status = new TextEncoder().encode('request_status');\n        if (bufEquals(pathName, request_status)) {\n          return value as RequestId;\n        }\n      }\n    }\n    const requestId = getRequestId(fields);\n\n    await this.#rootKeyGuard();\n    const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n\n    const transformedRequest = request ?? (await this.createReadStateRequest(fields, identity));\n\n    const body = cbor.encode(transformedRequest.body);\n\n    this.log.print(\n      `fetching \"/api/v2/canister/${canister}/read_state\" with request:`,\n      transformedRequest,\n    );\n    // TODO - https://dfinity.atlassian.net/browse/SDK-1092\n    const backoff = this.#backoffStrategy();\n    try {\n      const response = await this.#requestAndRetry({\n        request: () =>\n          this.#fetch(\n            '' + new URL(`/api/v2/canister/${canister.toString()}/read_state`, this.host),\n            {\n              ...this.#fetchOptions,\n              ...transformedRequest.request,\n              body,\n            },\n          ),\n        backoff,\n        tries: 0,\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Server returned an error:\\n` +\n            `  Code: ${response.status} (${response.statusText})\\n` +\n            `  Body: ${await response.text()}\\n`,\n        );\n      }\n      const decodedResponse: ReadStateResponse = cbor.decode(await response.arrayBuffer());\n\n      this.log.print('Read state response:', decodedResponse);\n      const parsedTime = await this.parseTimeFromResponse(decodedResponse);\n      if (parsedTime > 0) {\n        this.log.print('Read state response time:', parsedTime);\n        this.#waterMark = parsedTime;\n      }\n\n      return decodedResponse;\n    } catch (error) {\n      const message = `Caught exception while attempting to read state: ${(error as Error).message ?? String(error)}`;\n      const readStateError = new AgentReadStateError(\n        message,\n        error as HttpDetailsResponse,\n        String(requestId),\n        toHex(transformedRequest?.body?.sender_pubkey),\n        toHex(transformedRequest?.body?.sender_sig),\n        String(transformedRequest?.body?.content.ingress_expiry['_value']),\n      );\n      this.log.error(message, readStateError);\n      throw readStateError;\n    }\n  }\n\n  public async parseTimeFromResponse(response: { certificate: ArrayBuffer }): Promise<number> {\n    let tree: HashTree;\n    if (response.certificate) {\n      const decoded: { tree: HashTree } | undefined = cbor.decode(response.certificate);\n      if (decoded && 'tree' in decoded) {\n        tree = decoded.tree;\n      } else {\n        throw new Error('Could not decode time from response');\n      }\n      const timeLookup = lookup_path(['time'], tree);\n      if (timeLookup.status !== LookupStatus.Found) {\n        throw new Error('Time was not found in the response or was not in its expected format.');\n      }\n\n      if (!(timeLookup.value instanceof ArrayBuffer) && !ArrayBuffer.isView(timeLookup)) {\n        throw new Error('Time was not found in the response or was not in its expected format.');\n      }\n      const date = decodeTime(bufFromBufLike(timeLookup.value as ArrayBuffer));\n      this.log.print('Time from response:', date);\n      this.log.print('Time from response in milliseconds:', Number(date));\n      return Number(date);\n    } else {\n      this.log.warn('No certificate found in response');\n    }\n    return 0;\n  }\n\n  /**\n   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n   * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n   */\n  public async syncTime(canisterId?: Principal): Promise<void> {\n    await this.#rootKeyGuard();\n    const CanisterStatus = await import('../../canisterStatus');\n    const callTime = Date.now();\n    try {\n      if (!canisterId) {\n        this.log.print(\n          'Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai',\n        );\n      }\n\n      const anonymousAgent = HttpAgent.createSync({\n        identity: new AnonymousIdentity(),\n        host: this.host.toString(),\n        fetch: this.#fetch,\n        retryTimes: 0,\n      });\n\n      const status = await CanisterStatus.request({\n        // Fall back with canisterId of the ICP Ledger\n        canisterId: canisterId ?? Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n        agent: anonymousAgent,\n        paths: ['time'],\n      });\n\n      const replicaTime = status.get('time');\n      if (replicaTime) {\n        this.#timeDiffMsecs = Number(replicaTime as bigint) - Number(callTime);\n        this.log.notify({\n          message: `Syncing time: offset of ${this.#timeDiffMsecs}`,\n          level: 'info',\n        });\n      }\n    } catch (error) {\n      this.log.error('Caught exception while attempting to sync time', error as AgentError);\n    }\n  }\n\n  public async status(): Promise<JsonObject> {\n    const headers: Record<string, string> = this.#credentials\n      ? {\n          Authorization: 'Basic ' + btoa(this.#credentials),\n        }\n      : {};\n\n    this.log.print(`fetching \"/api/v2/status\"`);\n    const backoff = this.#backoffStrategy();\n    const response = await this.#requestAndRetry({\n      backoff,\n      request: () =>\n        this.#fetch('' + new URL(`/api/v2/status`, this.host), { headers, ...this.#fetchOptions }),\n      tries: 0,\n    });\n    return cbor.decode(await response.arrayBuffer());\n  }\n\n  public async fetchRootKey(): Promise<ArrayBuffer> {\n    let result: ArrayBuffer;\n    // Wait for already pending promise to avoid duplicate calls\n    if (this.#rootKeyPromise) {\n      result = await this.#rootKeyPromise;\n    } else {\n      // construct promise\n      this.#rootKeyPromise = new Promise<ArrayBuffer>((resolve, reject) => {\n        this.status()\n          .then(value => {\n            // Hex-encoded version of the replica root key\n            const rootKey = (value as JsonObject & { root_key: ArrayBuffer }).root_key;\n            this.rootKey = rootKey;\n            resolve(rootKey);\n          })\n          .catch(reject);\n      });\n      result = await this.#rootKeyPromise;\n    }\n    // clear rootkey promise and return result\n    this.#rootKeyPromise = null;\n    return result;\n  }\n\n  async #rootKeyGuard(): Promise<void> {\n    if (this.rootKey) {\n      return;\n    } else if (this.rootKey === null && this.#shouldFetchRootKey) {\n      await this.fetchRootKey();\n    } else {\n      throw new AgentError(\n        `Invalid root key detected. The root key for this agent is ${this.rootKey} and the shouldFetchRootKey value is set to ${this.#shouldFetchRootKey}. The root key should only be unknown if you are in local development. Otherwise you should avoid fetching and use the default IC Root Key or the known root key of your environment.`,\n      );\n    }\n  }\n\n  public invalidateIdentity(): void {\n    this.#identity = null;\n  }\n\n  public replaceIdentity(identity: Identity): void {\n    this.#identity = Promise.resolve(identity);\n  }\n\n  public async fetchSubnetKeys(canisterId: Principal | string) {\n    await this.#rootKeyGuard();\n    const effectiveCanisterId: Principal = Principal.from(canisterId);\n    const response = await request({\n      canisterId: effectiveCanisterId,\n      paths: ['subnet'],\n      agent: this,\n    });\n\n    const subnetResponse = response.get('subnet');\n    if (subnetResponse && typeof subnetResponse === 'object' && 'nodeKeys' in subnetResponse) {\n      this.#subnetKeys.set(effectiveCanisterId.toText(), subnetResponse as SubnetStatus);\n      return subnetResponse as SubnetStatus;\n    }\n    // If the subnet status is not returned, return undefined\n    return undefined;\n  }\n\n  protected _transform(request: HttpAgentRequest): Promise<HttpAgentRequest> {\n    let p = Promise.resolve(request);\n    if (request.endpoint === Endpoint.Call) {\n      for (const fn of this.#updatePipeline) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    } else {\n      for (const fn of this.#queryPipeline) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    }\n\n    return p;\n  }\n}\n"]}